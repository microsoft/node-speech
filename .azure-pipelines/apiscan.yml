name: $(Date:yyyyMMdd)$(Rev:.r)

trigger:
  batch: true
  branches:
    include:
      - main

resources:
  repositories:
    - repository: 1esPipelines
      type: git
      name: 1ESPipelineTemplates/1ESPipelineTemplates
      ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1esPipelines
  parameters:
    sdl:
      sourceAnalysisPool: 1es-windows-2022-x64
      tsa:
        enabled: true

    stages:
      - stage: Build
        jobs:
        - job: APIScan
          pool:
            name: 1es-windows-2022-x64
            os: Windows
          steps:
            - pwsh: |
                echo @"<?xml version="1.0" encoding="utf-8"?>
                  <configuration>
                    <packageSources>
                      <clear />
                      <add key="node-speech" value="https://pkgs.dev.azure.com/monacotools/Monaco/_packaging/node-speech/nuget/v3/index.json" />
                    </packageSources>
                  </configuration>
                "@ > nuget.config
              displayName: Change feed

            - task: NuGetAuthenticate@1

            - pwsh: ./setup-packages.ps1
              displayName: Download and extract C# packages

            - script: npm ci
              displayName: Install and build

            - task: CopyFiles@2
              inputs:
                SourceFolder: '$(Build.SourcesDirectory)/build'
                Contents: |
                  '**\*.dll'
                  '**\*.node'
                  '**\*.pdb'
                TargetFolder: '$(Agent.TempDirectory)/apiscan'
                flattenFolders: true
              displayName: Copy files for APIScan
              condition: succeeded()

            # Run APIScan
            # - task: APIScan@2
            #   inputs:
            #     softwareFolder: '$(Agent.TempDirectory)/apiscan'
            #     softwareName: 'vscode-node-speech'
            #     softwareVersionNum: '1'
            #     isLargeApp: false
            #     toolVersion: 'Latest'
            #   displayName: Run APIScan
            #   condition: succeeded()
            #   env:
            #     AzureServicesAuthConnectionString: $(apiscan-connectionstring)

            - task: PublishSecurityAnalysisLogs@3
              displayName: Publish security logs
              inputs:
                ArtifactName: 'CodeAnalysisLogs'
                ArtifactType: 'Container'
                AllTools: true
                ToolLogsNotFoundAction: 'Standard'
